import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:luckygo_pemandu/global.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'firebase_options.dart'; // generated by flutterfire configure
import 'auth_gate.dart';
import 'loginRegister/session_manager.dart';

// localization
import 'package:luckygo_pemandu/gen_l10n/app_localizations.dart';
// If you have a mapper from language name -> Locale, import it and use it.
// import 'package:luckygo_pemandu/translate_bahasa.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  // allows runtime language change from anywhere
  static void setLocale(BuildContext context, Locale? locale) {
    final state = context.findAncestorStateOfType<_MyAppState>();
    state?._setLocale(locale);
  }

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {

  Locale? _locale;
  bool _ready = false;
  Object? _error;

  void _setLocale(Locale? locale) {
    setState(() => _locale = locale);
  }

  Future<void> _fetchLocalData() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      Gv.negara  = (prefs.getString('country')  ?? '').trim();
      Gv.negeri  = (prefs.getString('state')    ?? '').trim();
      Gv.kawasan = (prefs.getString('area')     ?? '').trim();
      Gv.bahasa  = (prefs.getString('language') ?? '').trim();

      if (Gv.negara == 'Malaysia'){
        Gv.currency = 'MYR';
      } else if (Gv.negara == 'Timor-Leste'){
        Gv.currency = 'USD';
      } else if (Gv.negara == 'Indonesia'){
        Gv.currency = 'IDR';
      } else {
        Gv.currency = 'RM';
      }

    } catch (e) {
      debugPrint('fetchLocalData error: $e');
      // do not rethrow; allow app to continue with defaults
    }
  }

Future<void> fetchAndUpdateGroupCapability() async {
  try {
    final docRef = FirebaseFirestore.instance
        .collection(Gv.negara)
        .doc(Gv.negeri)
        .collection('driver_account')
        .doc(Gv.loggedUser);

    final docSnapshot = await docRef.get();

    if (docSnapshot.exists) {
      final data = docSnapshot.data();
      Gv.groupCapability = data?['group_capability'] as int? ?? 0;
      final brand = data?['reg_vehicle_brand'] ?? '';
      final color = data?['reg_vehicle_color'] ?? '';
      final model = data?['reg_vehicle_model'] ?? '';
      final plate = data?['reg_vehicle_plate'] ?? '';
      Gv.driverVehicleDetails = '$brand $model $color $plate';

      print('Document does not exist.');
    }
  } catch (e) {
    print('Error fetching user data: $e');
  }
}


  Future<void> _bootstrap() async {
    try {
      // 1) Firebase
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );

      // 2) Load local data into Gv.*
      await _fetchLocalData();

      // 3) Restore session (e.g. Gv.loggedUser)
      await SessionManager.bootstrap();

      // 4) Now that negara, negeri, and loggedUser are set, fetch capability
      await fetchAndUpdateGroupCapability();

      // 5) Optionally set locale
      // final loc = localeFromLanguageName(Gv.bahasa);
      // if (loc != null) _locale = loc;

      setState(() {
        _ready = true;
      });
    } catch (e) {
      setState(() {
        _error = e;
      });
    }
  }


  @override
  void initState() {
    super.initState();
    _bootstrap(); // do all init work here, then show AuthGate()
  }




  @override
  Widget build(BuildContext context) {
    // while initializing
    if (_error != null) {
      return MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(
          body: Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.error_outline, size: 48),
                  const SizedBox(height: 12),
                  const Text(
                    'Failed to initialize the app.',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text('$_error', textAlign: TextAlign.center),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _error = null;
                        _ready = false;
                      });
                      _bootstrap();
                    },
                    child: const Text('Retry'),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    if (!_ready) {
      return MaterialApp(
        debugShowCheckedModeBanner: false,
        home: const Scaffold(
          body: Center(
            child: SizedBox(
              width: 36,
              height: 36,
              child: CircularProgressIndicator(strokeWidth: 3),
            ),
          ),
        ),
      );
    }

    // Ready â†’ build the real app with localization and AuthGate
    return MaterialApp(
      title: 'LuckyGo Pemandu',
      onGenerateTitle: (ctx) => AppLocalizations.of(ctx)!.appTitle,
      localizationsDelegates: AppLocalizations.localizationsDelegates,
      supportedLocales: AppLocalizations.supportedLocales,
      locale: _locale, // allows runtime switching via MyApp.setLocale

      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),

      // After bootstrap is done, hand off to AuthGate
      home: const AuthGate(),
    );
  }
}
