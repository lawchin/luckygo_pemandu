import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:luckygo_pemandu/global.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'firebase_options.dart'; // generated by flutterfire configure
import 'auth_gate.dart';
import 'loginRegister/session_manager.dart';

// localization
import 'package:luckygo_pemandu/gen_l10n/app_localizations.dart';
// If you have a mapper from language name -> Locale, import it and use it.
// import 'package:luckygo_pemandu/translate_bahasa.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  // allows runtime language change from anywhere
  static void setLocale(BuildContext context, Locale? locale) {
    final state = context.findAncestorStateOfType<_MyAppState>();
    state?._setLocale(locale);
  }

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Locale? _locale;

  bool _ready = false;
  Object? _error;

  @override
  void initState() {
    super.initState();
    _bootstrap(); // do all init work here, then show AuthGate()
  }

  Future<void> _bootstrap() async {
    try {
      // 1) Firebase
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );

      // 2) Load local data into Gv.*
      await _fetchLocalData();

      // 3) Optionally set locale based on Gv.bahasa (uncomment if you have a mapper)
      // final loc = localeFromLanguageName(Gv.bahasa);
      // if (loc != null) _locale = loc;

      // 4) Any session/bootstrap logic you already have
      await SessionManager.bootstrap();

      setState(() {
        _ready = true;
      });
    } catch (e) {
      setState(() {
        _error = e;
      });
    }
  }

  void _setLocale(Locale? locale) {
    setState(() => _locale = locale);
  }

  Future<void> _fetchLocalData() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      Gv.negara  = (prefs.getString('country')  ?? '').trim();
      Gv.negeri  = (prefs.getString('state')    ?? '').trim();
      Gv.kawasan = (prefs.getString('area')     ?? '').trim();
      Gv.bahasa  = (prefs.getString('language') ?? '').trim();

      // If you need logged user here as well, you can also load it:
      // Gv.loggedUser = (prefs.getString('loggedUser') ?? '').trim();
    } catch (e) {
      debugPrint('fetchLocalData error: $e');
      // do not rethrow; allow app to continue with defaults
    }
  }

  @override
  Widget build(BuildContext context) {
    // while initializing
    if (_error != null) {
      return MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(
          body: Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.error_outline, size: 48),
                  const SizedBox(height: 12),
                  const Text(
                    'Failed to initialize the app.',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text('$_error', textAlign: TextAlign.center),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _error = null;
                        _ready = false;
                      });
                      _bootstrap();
                    },
                    child: const Text('Retry'),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    if (!_ready) {
      return MaterialApp(
        debugShowCheckedModeBanner: false,
        home: const Scaffold(
          body: Center(
            child: SizedBox(
              width: 36,
              height: 36,
              child: CircularProgressIndicator(strokeWidth: 3),
            ),
          ),
        ),
      );
    }

    // Ready â†’ build the real app with localization and AuthGate
    return MaterialApp(
      title: 'LuckyGo Pemandu',
      onGenerateTitle: (ctx) => AppLocalizations.of(ctx)!.appTitle,
      localizationsDelegates: AppLocalizations.localizationsDelegates,
      supportedLocales: AppLocalizations.supportedLocales,
      locale: _locale, // allows runtime switching via MyApp.setLocale

      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),

      // After bootstrap is done, hand off to AuthGate
      home: const AuthGate(),
    );
  }
}


// import 'package:flutter/material.dart';
// import 'package:firebase_core/firebase_core.dart';

// import 'firebase_options.dart'; // generated by flutterfire configure
// import 'auth_gate.dart';
// import 'loginRegister/session_manager.dart';

// // <-- ADD THIS for localization generated into lib/gen_l10n
// import 'package:luckygo_pemandu/gen_l10n/app_localizations.dart';

// // (Optional) if you created the language mapper here:
// // import 'package:luckygo_pemandu/translate_bahasa.dart';

// void main() async {
//   WidgetsFlutterBinding.ensureInitialized();
//   runApp(const MyApp());
// }

// class MyApp extends StatefulWidget {
//   const MyApp({super.key});

//   // Call this from anywhere (e.g., LoginPage) to change the app language.
//   static void setLocale(BuildContext context, Locale? locale) {
//     final state = context.findAncestorStateOfType<_MyAppState>();
//     state?._setLocale(locale);
//   }

//   @override
//   State<MyApp> createState() => _MyAppState();
// }

// class _MyAppState extends State<MyApp> {
//   Locale? _locale;

//   // Keeps Gv.loggedUser / Gv.userName in sync + loads from SharedPreferences
//   Future<void> _initApp() async {
//     await Firebase.initializeApp(
//       options: DefaultFirebaseOptions.currentPlatform,
//     );
//     await SessionManager.bootstrap(); // or AuthPage.bootstrap()
//   }

//   void _setLocale(Locale? locale) {
//     setState(() => _locale = locale);
//   }

//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       // Fallback title (used at build time before localization is ready)
//       title: 'LuckyGo Pemandu',
//       // <-- localization hooks
//       onGenerateTitle: (ctx) => AppLocalizations.of(ctx)!.appTitle,
//       localizationsDelegates: AppLocalizations.localizationsDelegates,
//       supportedLocales: AppLocalizations.supportedLocales,
//       // <-- allow runtime language switching
//       locale: _locale,

//       debugShowCheckedModeBanner: false,
//       theme: ThemeData(
//         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
//         useMaterial3: true,
//       ),
//       home: FutureBuilder<void>(
//         future: _initApp(),
//         builder: (context, snapshot) {
//           if (snapshot.connectionState == ConnectionState.waiting) {
//             return const Scaffold(
//               body: Center(
//                 child: SizedBox(
//                   width: 36,
//                   height: 36,
//                   child: CircularProgressIndicator(strokeWidth: 3),
//                 ),
//               ),
//             );
//           }

//           if (snapshot.hasError) {
//             return Scaffold(
//               body: Center(
//                 child: Padding(
//                   padding: const EdgeInsets.all(24.0),
//                   child: Column(
//                     mainAxisSize: MainAxisSize.min,
//                     children: [
//                       const Icon(Icons.error_outline, size: 48),
//                       const SizedBox(height: 12),
//                       const Text(
//                         'Failed to initialize Firebase.',
//                         style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
//                         textAlign: TextAlign.center,
//                       ),
//                       const SizedBox(height: 8),
//                       Text('${snapshot.error}', textAlign: TextAlign.center),
//                       const SizedBox(height: 16),
//                       ElevatedButton(
//                         onPressed: () => (context as Element).reassemble(),
//                         child: const Text('Retry'),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             );
//           }

//           // After init, let AuthGate decide where to go.
//           return const AuthGate();
//         },
//       ),
//     );
//   }
// }
